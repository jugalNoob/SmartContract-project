 // SPDX-License-Identifier: GPL-3.0


pragma solidity 0.8.6;
abstract contract ERC20Token {
    function name() virtual public view returns (string memory);
    function symbol() virtual public view returns (string memory);
    function decimals() virtual public view returns (uint8);
    function totalSupply() virtual public view returns (uint256);
    function balanceOf(address _owner) virtual public view returns (uint256 balance);
    function transfer(address _to, uint256 _value) virtual public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);
    function approve(address _spender, uint256 _value) virtual public returns (bool success);
    function allowance(address _owner, address _spender) virtual public view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}


contract Token is ERC20Token{
string  _symbol;
    string  _name;
    uint8  _decimal;
    uint  _totalSupply;
  address  _minter;
  address _burn;

  address Admin;
        mapping(address => uint) balances;
        mapping(address=>mapping(address => uint256)) allowed;

          constructor (address minter_ , address burn_ ) {
        _symbol = "Tk";
        _name = "Token";
        _decimal = 0;
        _totalSupply = 100000;
        _minter=minter_;
        _burn=burn_;
        
        balances[_burn] = _totalSupply;

        balances[_minter] = _totalSupply;
        // emit Transfer(address(0), _minter, _totalSupply);
        Admin=msg.sender;
    }

function name() public view override  returns (string memory){

return _name;

}


function symbol() public view override  returns (string memory){

    return _symbol;

}
function decimals() public view override  returns (uint8){

return _decimal;
}


function totalSupply() public view override  returns (uint256){

return _totalSupply;

}


 function balanceOf(address _owner) public override view returns (uint256 balance) {
        return balances[_owner];
    }

function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {
        require(balances[_from] >= _value);
        balances[_from] -= _value; // balances[_from] = balances[_from] - _value
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

function transfer(address _to, uint256 _value) public override  returns (bool success){
require(balances[msg.sender] >= _value , "insufficient token");
balances[msg.sender]-=_value;
balances[_to]+=_value;
emit Transfer( msg.sender,_to , _value);
return true;
}



function approve(address _spender, uint256 _value) public override returns (bool success) {

allowed[msg.sender ][_spender]=_value;
emit Approval(msg.sender , _spender , _value);
        return true;
    }


function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {
        
return allowed[_owner][_spender];
    }

    modifier onlyAdmin{
        require(msg.sender == Admin, "only Atc can run this function");

        _;
    }

function Mint(uint amount) public onlyAdmin returns (bool) {
        require(msg.sender == _minter);
        balances[_minter] += amount;
        _totalSupply += amount;
        return true;
    }


function Burn(uint amount) public onlyAdmin returns (bool) {
        require(msg.sender == _minter);
        balances[_burn] -= amount;
        _totalSupply -= amount;
        return true;
    }


    //Stacking erc 20 start row class  ////////////////////////////////////////////

    struct enoms {
        string name;
        uint age;
        string gender;
            address  owner;
       
    }
    

 
    mapping(address => uint256) private stacking;
    mapping (address => uint256) private times;
        mapping(uint => enoms) public Ticket;
           uint public book;

function Stacking( uint _value,address payable getter, uint price,string memory onename, uint _age , string memory _gender ) public  payable {
    uint _amount=600;
    require(_amount == _value , "fixed stacking");
    times[msg.sender]=block.timestamp;
    stacking[msg.sender]+=_amount;
        balances[msg.sender]-=_value;

    require(price > 10 wei, "Ticket price must be greater than 1000 wei.");
    require(msg.value >= price, "Insufficient funds.");

    getter.transfer(price);
    contractBalance -= price;
    Ticket[book] = enoms(onename, _age , _gender , msg.sender);
    book++;

       
    }


function UnStacking(uint _value  , uint ticketNumber ) public payable  {
    uint _amount=500;
    require(_amount == _value , "fixed stacking");
        times[msg.sender]=block.timestamp;
        stacking[msg.sender]-=_amount;
        balances[msg.sender]+=_value;
    require(ticketNumber < book, "Invalid ticket number.");
    // get the ticket information
    enoms memory ticket = Ticket[ticketNumber];
    // refund the ticket price back to the buyer
    payable(ticket.owner).transfer(10 wei);
    // reduce the contract balance
    contractBalance += 10 wei;
    // remove the ticket from the mapping
    delete Ticket[ticketNumber];
    }


    uint public contractBalance;

    function pay() public payable onlyAdmin {
        require(msg.value > 0, "Payment amount must be greater than zero.");

        contractBalance += msg.value;
    }



  function getStacking(address user) public view returns (uint256, uint256) {
        return (stacking[user], times[user]);
    }
 
}

