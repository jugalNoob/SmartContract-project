// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


pragma solidity ^0.8.0;

contract HelloWorlds {
    address[] private addresses;  // Change to dynamic array
    address Admin;
    uint private one;
    bool private addressShown = false; // Add the addressShown state variable

    constructor() {
        Admin = msg.sender;
        one = block.timestamp + 10;
    }

    function getAllAddresses() public view returns (address[] memory) {
        require(one < block.timestamp, "Please wait until all addresses are added.");
        return addresses;
    }

    function getRandomAddress() public  view returns (address) {
        require(addresses.length > 0, "No addresses in the array.");
        uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender))) % addresses.length;
        return addresses[randomIndex];
    }



function getAllAddressesUser() public view returns (address, string memory) {
    string memory stringes = "Only one random address can be shown.";
    string memory win = "this address is the winner";
    address randomAddress = getRandomAddress();
    string memory resultString;
    if (addresses.length < 1) {
           randomAddress = address(0); // Set randomAddress to the zero address
        resultString = stringes;
    } else {
      resultString = win;
    }
    return (randomAddress, resultString);
}


    function isAddressInArray(address _checkAddress) private view returns (bool) {
        for (uint256 i = 0; i < addresses.length; i++) {
            if (addresses[i] == _checkAddress) {
                return true;
            }
        }
        return false;
    }

    function addAddress(address _newAddress) public {
        require(addresses.length < 2, "Only up to four addresses can be added.");
        require(!isAddressInArray(_newAddress), "Address is already in the array.");
        addresses.push(_newAddress);
    }
}



//// With Number 

// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract XXX {
    address private owner;

    modifier onlyOwner() {
        require(owner == msg.sender, "Only owner can call this function");
        _;
    }

    uint public randomNumber;

    constructor() {
        owner = msg.sender;
    }

    function generateRandomNumber(uint256 maxValue) public onlyOwner returns (uint256) {
        require(maxValue > 0, "maxValue must be greater than 0");
        require(maxValue < 10, "maxValue must be greater than 10");

        uint256 randomSeed = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, blockhash(block.number))));
        randomNumber = randomSeed % maxValue;

        return randomNumber;
    }

    function winner() public view returns (uint256) {
        if (randomNumber == 5) {
            revert("Winner: randomNumber is 5");
        } else {
            revert("Not a winner: randomNumber is not 5");
        }
    }
}



//////////////  Random Number Gen ----------------------  ///////////////////////////////////////////////////////////

// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract XXX {
    address private owner;

    modifier onlyOwner() {
        require(owner == msg.sender, "Only owner can call this function");
        _;
    }

    uint public randomNumber;

    constructor() {
        owner = msg.sender;
    }

    function generateRandomNumber(uint256 maxValue) public onlyOwner returns (uint256) {
        require(maxValue > 0, "maxValue must be greater than 0");
        require(maxValue < 10, "maxValue must be greater than 10");

        uint256 randomSeed = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, blockhash(block.number))));
        randomNumber = randomSeed % maxValue;

        return randomNumber;
    }

    function winner() public view returns (uint256) {
        if (randomNumber == 5) {
            revert("Winner: randomNumber is 5");
        } else {
            revert("Not a winner: randomNumber is not 5");
        }
    }
}

//    require(randomNumber != 5, "Winner");
//         require(randomNumber == 5, "Not a winner");


// contract XXX {
//     function All() public pure returns (uint256) {
//         uint num = 4;

//         if (num > 52) {
//             revert("winer");
//             // return num;
//         } else {
//             revert("jugal");
//         }
//     }
// }


