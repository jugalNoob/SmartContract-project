
||||||||||||||||||| --------------------- >>>>>>>>>>>>>>
import-directive
using-directive
contract-definition
interface-definition
library-definition
function-definition
constant-variable-declaration
struct-definition
enum-definition
user-defined-value-type-definition
error-definition
event-definition


::::::::::::::::: ------------------ >>>>>>>>>>> 

contract ExampleContract {
    // Define an enum named 'Status' with three possible values: 'Pending', 'Approved', and 'Rejected'
    enum Status {
        Pending,
        Approved,
        Rejected
    }

    // Declare a state variable of type 'Status'
    Status public status;

    // Function to set the status
    function setStatus(Status _status) public {
        status = _status;
    }

    // Function to get the current status
    function getStatus() public view returns (Status) {
        return status;
    }
}




::::::::::::::::: ------------ storage ---

data-location
memory
storage
calldata




:::::::::::::::::::: ----------------Contract-related
this (current contract’s type): the current contract, explicitly convertible to address or address payable

super: a contract one level higher in the inheritance hierarchy

selfdestruct(address payable recipient): send all funds to the given address and (only on EVMs before Cancun or when invoked
within the transaction creating 
the contract) destroy the contract.





||||||||||||||||||||||||||||||  ----------------> Function Visibility Specifiers


public: visible externally and internally (creates a getter function for storage/state variables)

private: only visible in the current contract

external: only visible externally (only for functions) - i.e. can only be message-called (via this.func)

internal: onl





|||||||||||||||||||||Modifiers  ------------->


pure for functions: Disallows modification or access of state.

view for functions: Disallows modification of state.

payable for functions: Allows them to receive Ether together with a call.

constant for state variables: Disallows assignment (except initialization), does not occupy storage slot.

immutable for state variables: Allows assignment at construction time and is constant when deployed. Is stored in code.

anonymous for events: Does not store event signature as topic.

indexed for event parameters: Stores the parameter as topic.

virtual for functions and modifiers: Allows the function’s or modifier’s behavior to be changed in derived contracts.

override: States that this function, modifier or public state variable changes the behavior of a function or modifier in a base contract.









||||||||||||||||||||||||||||||||||||  Global Variable in solidity 
   address public owner;
    uint public contractCreationTime;
    
    constructor() {
        owner = msg.sender;
        contractCreationTime = block.timestamp;
    }

 
uint public one=tx.gasprice;      ///////gas price of the transaction

address public two=tx.origin; ////////sender of the transaction (full call chain)

  function getBlockHash(uint blockNumber) public view returns (bytes32) {  ////
        return blockhash(blockNumber);
    }


block.coinbase (address payable): current block miner’s address  ///////////


uint public io=block.chainid ;  ///////// 


block.basefee (uint): current block’s base fee (EIP-3198 and EIP-1559)  ///

block.blobbasefee (uint): current block’s blob base fee (EIP-7516 and EIP-4844) ///


   bytes4 public one;
    function someFunction() public {  ///data.sig
        one = msg.sig;
    }


bytes public  one=msg.data; //current data

   uint public gasLimit=block.number; // block.Number

  uint public gasLimit;


    function setGasLimit(uint _gasLimit) external {
        gasLimit = _gasLimit;
    }



    function getSender() public view returns (address) {
        return msg.sender;
    }

    function getMessageValue() public payable {
        // Do something with the value sent with the transaction
    }

    function getCurrentBlockNumber() public view returns (uint) {
        return block.number;
    }

    function getContractBalance() public view returns (uint) {
        return address(this).balance;
    }

    function getCurrentTimestamp() public view returns (uint) {
        return block.timestamp;
    }


|||||||||||||||||||| View or Pure \\\\\||||||||||||||||||||||||||||||||||||||
 uint public one=69;

 function vi()public view  returns(uint){
    return  one;
 }

  function purez()public pure  returns(uint){
    uint io=56;
    return  io;
 }





||||||||||||||Array ||||||||||||||||||||||||||

// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;
contract Practies {
    string[] public one = ["jugal", "sharma", "karam"];

    function Pushing(string memory newElement) public {
        one.push(newElement);
    }

    function CheckLength() public view returns (uint) {
        return one.length;
    }

    function popes() public {
        one.pop();
    }

    function LoopingArray() public view returns (string[] memory) {
        string[] memory newArray = new string[](one.length);
        for (uint i = 0; i < one.length; i++) {
            newArray[i] = one[i];
        }
        return newArray;
    }
}


 function loopss() public view returns(uint[] memory) {
        return ar;
    }



||||||||||||||Bytes |"|||||||||||||||||||||||||||||||||||||

// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract Practice {
 
 bytes public  one="jugal";

function pushinh()public {
    one.push("c");
}
 function getLength() public view returns (uint) {
        return one.length;
    }

function Poping()public{
    one.pop();
}

bytes public data="jugal";



    function by(string memory c) public {
        bytes memory converted = bytes(c);
        for (uint i = 0; i < converted.length; i++) {
            data.push(converted[i]);
        }

}




}

||||||||||||||||||||||Struct Your Code 
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract Practice {
    struct MyStruct {
        uint number;
        string name;
        address addr;
    }

    MyStruct public myData;

    function setMyStruct(uint _number, string memory _name) public {
        myData = MyStruct(_number, _name, msg.sender);
       
    }

    function Updating(uint _num , string memory _nam)public{
        myData.number=_num;
        myData.name=_nam;
    }
    
}


||||||||||||||||||||||||||||||Mapping Styem::::::::::::::::::::::::

// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract Practice {
    struct MyStruct {
        uint number;
        string name;
        address addr;
    }

    mapping(address => MyStruct) public Map;
    function Mappinges(uint _num, string memory _name) public {
        MyStruct memory newStruct = MyStruct(_num, _name, msg.sender);
        Map[msg.sender] = newStruct;
    }
}


||||||||||||||||||||||||||||| TimeStamp ???????????????????

uint public one=block.timestamp+10;
function onees()public view  returns(uint){
    require(one < block.timestamp , "time not show"); //after 10 min check your result    
    require(one < block.timestamp , "time not show"); //before 10 min check your result

}
}

|||||||||||||||||||||||| Create a wallet Ethereum ||||||||||||||||||||

contract Practice {
    receive() external payable {
        // This function allows the contract to receive Ether
    }
    function checkBalance() public view returns (uint) {
        return address(this).balance;
    }
    function transfer(address owner , uint value )public payable  {
      
    (bool sent, ) = owner.call{value: value}("");
    require(sent, "Transfer failed");
    }
}


|||||||||||||| Smart contract Hashing    ////////////////////////////////////////////////////////////////////

  function hashKeccak256(uint _x, string memory name, address _add) public pure returns(bytes32) {
        return keccak256(abi.encodePacked(_x, name, _add));
    }

    function hashSha256(uint _x, string memory name, address _add) public pure returns(bytes32) {
        return sha256(abi.encodePacked(_x, name, _add));
    }

    function hashRipemd160(uint _x, string memory name, address _add) public pure returns(bytes32) {
        return ripemd160(abi.encodePacked(_x, name, _add));



|||||||||||||||||||||| Modifer |||||||||||||||||||||||||||||
   uint public value;

    modifier checkValue(uint newValue) {
        require(newValue == 69, "Value must be 69");
        _;
    }

    function setValue(uint newValue) public checkValue(newValue) {
        value = newValue;
    }
       
    }



|||||||||||||||||||||||||||| contract  inheriting ///////////////////////
pragma solidity ^0.8.0;
contract HashFunctions {
    uint public one = 69;

    function Two() public view virtual returns (uint) {
        return one;
    }
}
contract Second is HashFunctions {
    function Two() public view override returns (uint) {
        return one;
    }
}


||||||||||||||||||| String validtion ///////////////////

function Strings(string memory name)public pure  returns(string memory){

require(bytes(name).length > 5);

return  name;
    }



||||||||||||||||||||||||  Struct and Mapping ------------------------

pragma solidity ^0.8.0;

contract HashFunctions {


struct Ones{
    string name;
    uint age;
}

mapping (address => Ones[])private Info;


function Information(string memory _name , uint _age)public{
Ones memory all=Ones(_name , _age);
Info[msg.sender].push(all);
}

function GetInfo()public view returns(Ones[] memory ){

    return  Info[msg.sender];
}
}


|||||||||||||||||||||||| Data Loaction  -- > Storage  , Memory  , CallDate /////////////////////////////////

contract HashFunctions {
/// Storage Data  

// --> Memory Ram 

// --> callData Ram and use in Function  input

 uint[] public arr=[1 , 2 , 3 , 4];

 function store()public {

 uint[] storage arr1=arr;

// arr1[3]=99;

 }

// function memorys() public  view {
// uint[] memory arr2=arr;

// arr2[1]=192;
// }

//CallData ----------------------------------------------------->>>

function   Meory(string memory str ,  uint[] memory arr)public{  
}

//
function  CallData(string calldata str ,  uint[] calldata arr)public{  //never change value
}
}



?????????????????????????????????? -------------------------------> Events  ----------------------------
uint public  constant one=451;

uint public two=7545;



/// Storge in trx logs 

contract HashFunctions {

event balance(address indexed  acc , string mess , uint age);

function Mess(address _acc , string memory _mess ,  uint _age)public{

emit balance  (_acc , _mess , _age );
}

}


//////////////////////////////////// ------------------------------>  Improts Smart Contract 

// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;



contract Practices {
    uint public one = 12345;

    string  public two="jugal sharma";
}


// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;



contract Practices {
    uint public one = 12345;

    string  public two="jugal sharma";
}















These are the built-in functions available in the EVM Yul dialect:

- `stop`
- `add`
- `sub`
- `mul`
- `div`
- `sdiv`
- `mod`
- `smod`
- `exp`
- `not`
- `lt`
- `gt`
- `slt`
- `sgt`
- `eq`
- `iszero`
- `and`
- `or`
- `xor`
- `byte`
- `shl`
- `shr`
- `sar`
- `addmod`
- `mulmod`
- `signextend`
- `keccak256`
- `pop`
- `mload`
- `mstore`
- `mstore8`
- `sload`
- `sstore`
- `tload`
- `tstore`
- `msize`
- `gas`
- `address`
- `balance`
- `selfbalance`
- `caller`
- `callvalue`
- `calldataload`
- `calldatasize`
- `calldatacopy`
- `extcodesize`
- `extcodecopy`
- `returndatasize`
- `returndatacopy`
- `mcopy`
- `extcodehash`
- `create`
- `create2`
- `call`
- `callcode`
- `delegatecall`
- `staticcall`
- `return`
- `revert`
- `selfdestruct`
- `invalid`
- `log0`
- `log1`
- `log2`
- `log3`
- `log4`
- `chainid`
- `origin`
- `gasprice`
- `blockhash`
- `blobhash`
- `coinbase`
- `timestamp`
- `number`
- `difficulty`
- `prevrandao`
- `gaslimit`
- `basefee`
- `blobbasefee`

These functions cover a wide range of operations and interactions available in the EVM (Ethereum Virtual Machine).
They are used for various purposes such as arithmetic operations, memory manipulation, storage access, gas management,
contract interaction, logging, and accessing blockchain information.




